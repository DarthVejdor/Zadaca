#include <iostream>
#include <string>
#include <unordered_map>
using namespace std;

enum AIModelType
{
    GPT,
    VISION,
    CLASSIFIER,
    EMBEDDING
};
class InvalidNumberOfParametersException {
public:
    void print() const
    {
        cout << "Invalid number of parameters" << endl;
    }
};

class InvalidModelTypeException
{
public:
    void print() const
    {
        cout << "Invalid model type" << endl;
    }
};

class AIModel {
private:
    string brand;
    string name;
    string version;
public:
    AIModel(string brand, string name, string version)
           : brand(brand), name(name), version(version) {}
    void print() const
    {
        cout << "Brand: " << brand << endl;
        cout << "Name: " << name << endl;
        cout << "Version: " << version << endl;
    }
};

class AIConfiguration {
private:
    int parameters;
    int epochs;
    AIModelType type;
public:
    AIConfiguration(int parameters,int epochs, AIModelType type) {
        if(parameters<0){
            throw InvalidNumberOfParametersException();
        }
        if(type<GPT || type>EMBEDDING) {
            throw InvalidModelTypeException();
        }
        this->parameters = parameters;
        this->epochs = epochs;
        this->type = type;
    }
    void print() {
        cout << "Parameters: " << parameters << endl;
        cout << "Epochs: " << epochs << endl;
        cout << "Type: ";
        switch(type) {
            case GPT:
                cout << "GPT" << endl;
            break;
            case VISION:
                cout << "VISION" << endl;
            break;
            case CLASSIFIER:
                cout << "CLASSIFIER" << endl;
            break;
            case EMBEDDING:
                cout << "EMBEDDING" << endl;
            break;
        }
        }
    };



AIModelType getStringMapping(string typeStr)
{
    unordered_map<string, AIModelType> mapping = {
        {"GPT", GPT},
        {"VISION", VISION},
        {"CLASSIFIER", CLASSIFIER},
        {"EMBEDDING", EMBEDDING}};

    if (mapping.find(typeStr) != mapping.end())
    {
        return mapping[typeStr];
    }
    else
    {
        return static_cast<AIModelType>(-1); // Invalid type
    }
}

// COMPLETE TODOs
int main()
{
    int tc;
    cin >> tc;
    if (tc == 1)
    {
        string brand, name, version;
        cout << "Testing AI Model Creation:";
        cin >> brand >> name >> version;
        AIModel model(brand, name, version);
        cout << " PASSED" << endl;
    }
    if (tc == 2)
    {
        AIModel model("OpenAI", "GPT-3", "v1.0");
        cout << "Testing Print Method for AI Model:" << endl;
        model.print();
    }
    if (tc == 3)
    {
        cout << "Testing AI Configuration Creation:";
        int parameters, epochs;
        string typeStr;
        cin >> parameters >> epochs >> typeStr;
        AIModelType type = getStringMapping(typeStr);
        try {
            AIConfiguration config(parameters, epochs, type);
            cout << " PASSED" << endl;
        }
        catch (InvalidModelTypeException &e) {
            e.print();
        }
        catch (InvalidNumberOfParametersException &e) {
            e.print();
        }

    }
    if (tc == 4)
    {
        cout << "Testing Print Method for AI Configuration:" << endl;
        int parameters = 10, epochs = 5;
        string typeStr = "GPT";
        AIModelType type = getStringMapping(typeStr);
        try {
            AIConfiguration config(parameters, epochs, type);
            config.print();
        }
        catch (InvalidNumberOfParametersException &e)
        {
            e.print();
        }
        catch (InvalidModelTypeException &e)
        {
            e.print();
        }
    }

    if (tc == 5)
    {
        cout << "Testing Invalid Number of Parameters Exception:" << endl;
        int parameters, epochs;
        string typeStr = "GPT";
        cin >> parameters >> epochs;
        AIModelType type = getStringMapping(typeStr);
        try
        {
            AIConfiguration config(parameters, epochs, type);
            config.print();
        }
        catch (InvalidNumberOfParametersException &e)
        {
            e.print();
        }
        catch (InvalidModelTypeException &e)
        {
            e.print();
        }
    }

    if (tc == 6)
    {
        cout << "Testing Invalid Model Type Exception:" << endl;
        int parameters = 10, epochs = 5;
        string typeStr;
        cin >> typeStr;
        AIModelType type = getStringMapping(typeStr);
        try
        {
            AIConfiguration config(parameters, epochs, type);
            config.print();
        }
        catch (InvalidNumberOfParametersException &e)
        {
            e.print();
        }
        catch (InvalidModelTypeException &e)
        {
            e.print();
        }
    }

    return 0;
}
