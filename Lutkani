#include <iostream>
#include <fstream>
#include <cctype>
#include<string>
using namespace std;

void writeToFile() {
    ofstream file("text.txt");
    char c;
    while ((c = cin.get()) != '#') {
        file.put(c);
    }
    file.close();
}

class VehicleRegistration {
private:
    string registration_number;
    string manufacture_date;
    int mileage;
    int engine_power;
    int vehicle_age;
    double emission_level;

public:
    // Default constructor
    VehicleRegistration() {
        registration_number = "";
        manufacture_date = "";
        mileage = 0;
        engine_power = 0;
        vehicle_age = 0;
        emission_level = 0.0;
    }

    // Parameterized constructor
    VehicleRegistration(string reg, string date, int mil, int power, int age, double emission)
        : registration_number(reg), manufacture_date(date), mileage(mil),
          engine_power(power), vehicle_age(age), emission_level(emission) {}

    // Copy constructor
    VehicleRegistration(const VehicleRegistration &other) {
        registration_number = other.registration_number;
        manufacture_date = other.manufacture_date;
        mileage = other.mileage;
        engine_power = other.engine_power;
        vehicle_age = other.vehicle_age;
        emission_level = other.emission_level;
    }

    // Assignment operator
    VehicleRegistration &operator=(const VehicleRegistration &other) {
        if (this != &other) {
            registration_number = other.registration_number;
            manufacture_date = other.manufacture_date;
            mileage = other.mileage;
            engine_power = other.engine_power;
            vehicle_age = other.vehicle_age;
            emission_level = other.emission_level;
        }
        return *this;
    }
    string VehicleCategory() const {
        if (mileage > 250000 || vehicle_age > 20 || emission_level > 120.0 || engine_power < 60)
            return "Restricted";
        if (mileage > 150000 || vehicle_age > 15 || emission_level > 90.0 || engine_power < 80)
            return "Limited";
        return "Approved";
    }
    friend istream &operator>>(istream &in, VehicleRegistration &v);
    friend ostream &operator<<(ostream &out, const VehicleRegistration &v);
};

istream &operator>>(istream &in, VehicleRegistration &v) {
    in >> v.registration_number >> v.manufacture_date >> v.mileage >> v.engine_power >> v.vehicle_age >> v.emission_level;
    return in;
}

// ostream operator
ostream &operator<<(ostream &out, const VehicleRegistration &v) {
    out << "Vehicle Reg: " << v.registration_number << " " << v.manufacture_date
        << " | Mileage " << v.mileage << "km Power " << v.engine_power
        << "hp Age " << v.vehicle_age << "y Emission " << v.emission_level << "g/km" << endl;
    return out;
}

VehicleRegistration *FilterByVehicleCategory(VehicleRegistration *vehicles, int n, string category) {
    int br=0;
    for(int i=0;i<n;i++) {
        if(vehicles[i].VehicleCategory()==category){
        br++;
        }
    }
    VehicleRegistration *filtered= new VehicleRegistration[br];
    int index=0;
    for(int i=0;i<n;i++) {
        if(vehicles[i].VehicleCategory()==category){
            filtered[index++]=vehicles[i];
        }
    }
    return filtered;
}

int main() {
    writeToFile();

    ifstream fin("text.txt");
    if (!fin) {
        cerr << "Cannot open file\n";
        return 1;
    }

    // TODO: Вчитајте податоци од датотека (број на тест примери (testCase), број на записи (n) и податоци)
    int testCase, n;
    fin>>testCase>>n;

    // Остатокот од кодот останува непроменет

    VehicleRegistration *records = new VehicleRegistration[n];
    for (int i = 0; i < n; i++) {
        fin >> records[i];
    }

    if (testCase == 1) {
        cout << "===== Testing Constructor, Istream Operator & Ostream Operator =====" << endl;
        for (int i = 0; i < n; i++) {
            cout << records[i];
        }
    }

    if (testCase == 2) {
        cout << "===== Testing VehicleCategory Function =====" << endl;
        for (int i = 0; i < n; i++) {
            cout << records[i].VehicleCategory() << endl;
        }
    }

    if (testCase == 3) {
        cout << "===== Testing FilterByVehicleCategory Global Function =====" << endl;
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (records[i].VehicleCategory() == "Approved") {
                count++;
            }
        }
        VehicleRegistration *filtered = FilterByVehicleCategory(records, n, "Approved");
        cout << "Approved Vehicles:" << endl;
        for (int i = 0; i < count; i++) {
            cout << filtered[i];
        }
        delete[] filtered;
    }

    if (testCase == 4) {
        cout << "===== Testing FilterByVehicleCategory Global Function =====" << endl;
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (records[i].VehicleCategory() == "Limited") {
                count++;
            }
        }
        VehicleRegistration *filtered = FilterByVehicleCategory(records, n, "Limited");
        cout << "Limited Vehicles:" << endl;
        for (int i = 0; i < count; i++) {
            cout << filtered[i];
        }
        delete[] filtered;
    }

    if (testCase == 5) {
        cout << "===== Testing FilterByVehicleCategory Global Function =====" << endl;
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (records[i].VehicleCategory() == "Restricted") {
                count++;
            }
        }
        VehicleRegistration *filtered = FilterByVehicleCategory(records, n, "Restricted");
        cout << "Restricted Vehicles:" << endl;
        for (int i = 0; i < count; i++) {
            cout << filtered[i];
        }
        delete[] filtered;
    }

    delete[] records;
    return 0;
}
