#include <iostream>
#include <string>
#include <unordered_map>
#include <stdexcept>
using namespace std;

// Enum for AI Model Types
enum AIModelType { GPT, VISION, CLASSIFIER, EMBEDDING };

// Exception classes
class InvalidNumberOfParametersException : public runtime_error {
public:
    InvalidNumberOfParametersException()
        : runtime_error("Invalid number of parameters") {}
};

class InvalidModelTypeException : public runtime_error {
public:
    InvalidModelTypeException()
        : runtime_error("Invalid model type") {}
};

// AIModel class
class AIModel {
private:
    string brand;
    string name;
    string version;

public:
    AIModel(string b, string n, string v)
        : brand(b), name(n), version(v) {}

    void print() {
        cout << "AI Model: " << brand << " " << name << " " << version << endl;
    }
};

// AIConfiguration class
class AIConfiguration {
private:
    int parameters;
    int epochs;
    AIModelType type;

public:
    AIConfiguration(int p, int e, AIModelType t) {
        if (p < 0) {
            throw InvalidNumberOfParametersException();
        }
        if (t < GPT || t > EMBEDDING) {
            throw InvalidModelTypeException();
        }
        parameters = p;
        epochs = e;
        type = t;
    }

    void print() {
        string typeStr;
        switch(type) {
            case GPT: typeStr = "GPT"; break;
            case VISION: typeStr = "VISION"; break;
            case CLASSIFIER: typeStr = "CLASSIFIER"; break;
            case EMBEDDING: typeStr = "EMBEDDING"; break;
        }
        cout << "AI Configuration: " << parameters << " parameters, "
             << epochs << " epochs, " << typeStr << endl;
    }
};

AIModelType getStringMapping(string typeStr) {
    unordered_map<string, AIModelType> mapping = {
        {"GPT", GPT},
        {"VISION", VISION},
        {"CLASSIFIER", CLASSIFIER},
        {"EMBEDDING", EMBEDDING}};

    if (mapping.find(typeStr) != mapping.end()) {
        return mapping[typeStr];
    }
    else {
        return static_cast<AIModelType>(-1); // Invalid type
    }
}

int main() {
    int tc;
    cin >> tc;
    if (tc == 1) {
        string brand, name, version;
        cout << "Testing AI Model Creation:";
        cin >> brand >> name >> version;
        AIModel model(brand, name, version);
        cout << " PASSED" << endl;
    }
    if (tc == 2) {
        AIModel model("OpenAI", "GPT-3", "v1.0");
        cout << "Testing Print Method for AI Model:" << endl;
        model.print();
    }
    if (tc == 3) {
        cout << "Testing AI Configuration Creation:";
        int parameters, epochs;
        string typeStr;
        cin >> parameters >> epochs >> typeStr;
        AIModelType type = getStringMapping(typeStr);
        try {
            AIConfiguration config(parameters, epochs, type);
            cout << " PASSED" << endl;
        } catch (const exception& e) {
            cout << " FAILED: " << e.what() << endl;
        }
    }
    if (tc == 4) {
        cout << "Testing Print Method for AI Configuration:" << endl;
        int parameters = 10, epochs = 5;
        string typeStr = "GPT";
        AIModelType type = getStringMapping(typeStr);
        try {
            AIConfiguration config(parameters, epochs, type);
            config.print();
        } catch (const exception& e) {
            cout << "Error: " << e.what() << endl;
        }
    }
    if (tc == 5) {
        cout << "Testing Invalid Number of Parameters Exception:" << endl;
        int parameters, epochs;
        string typeStr = "GPT";
        cin >> parameters >> epochs;
        AIModelType type = getStringMapping(typeStr);
        try {
            AIConfiguration config(parameters, epochs, type);
            config.print();
        } catch (const exception& e) {
            cout << "Error: " << e.what() << endl;
        }
    }
    if (tc == 6) {
        cout << "Testing Invalid Model Type Exception:" << endl;
        int parameters = 10, epochs = 5;
        string typeStr;
        cin >> typeStr;
        AIModelType type = getStringMapping(typeStr);
        try {
            AIConfiguration config(parameters, epochs, type);
            config.print();
        } catch (const exception& e) {
            cout << "Error: " << e.what() << endl;
        }
    }
    return 0;
}
