#include <iostream>
#include <string>
#include <fstream>
#include <cctype>
using namespace std;

void writeToFile() {
    ofstream file("text.txt");
    char c;
    while ((c = cin.get()) != '#') {
        file.put(c);
    }
    file.close();
}

class VehicleRegistration {
private:
    string registration_number;
    string manufacture_date;
    int mileage;
    int engine_power;
    int vehicle_age;
    double emission_level;

public:
    // Default constructor
    VehicleRegistration() : registration_number(""), manufacture_date(""), mileage(0),
                          engine_power(0), vehicle_age(0), emission_level(0.0) {}

    // Parameterized constructor
    VehicleRegistration(string reg_num, string man_date, int mil, int eng_pow,
                       int age, double em_level) :
        registration_number(reg_num), manufacture_date(man_date), mileage(mil),
        engine_power(eng_pow), vehicle_age(age), emission_level(em_level) {}

    // Copy constructor
    VehicleRegistration(const VehicleRegistration& other) {
        registration_number = other.registration_number;
        manufacture_date = other.manufacture_date;
        mileage = other.mileage;
        engine_power = other.engine_power;
        vehicle_age = other.vehicle_age;
        emission_level = other.emission_level;
    }

    // Assignment operator
    VehicleRegistration& operator=(const VehicleRegistration& other) {
        if (this != &other) {
            registration_number = other.registration_number;
            manufacture_date = other.manufacture_date;
            mileage = other.mileage;
            engine_power = other.engine_power;
            vehicle_age = other.vehicle_age;
            emission_level = other.emission_level;
        }
        return *this;
    }

    // Input operator
    friend istream& operator>>(istream& in, VehicleRegistration& vehicle) {
        in >> vehicle.registration_number >> vehicle.manufacture_date
           >> vehicle.mileage >> vehicle.engine_power >> vehicle.vehicle_age
           >> vehicle.emission_level;
        return in;
    }

    // Output operator
    friend ostream& operator<<(ostream& out, const VehicleRegistration& vehicle) {
        out << "Vehicle Reg: " << vehicle.registration_number << " "
            << vehicle.manufacture_date << " | Mileage " << vehicle.mileage
            << "km Power " << vehicle.engine_power << "hp Age " << vehicle.vehicle_age
            << "y Emission " << vehicle.emission_level << "g/km" << endl;
        return out;
    }

    // Vehicle category function
    string VehicleCategory() const {
        if (mileage > 250000 || vehicle_age > 20 || emission_level > 120.0 || engine_power < 60) {
            return "Restricted";
        } else if (mileage > 150000 || vehicle_age > 15 || emission_level > 90.0 || engine_power < 80) {
            return "Limited";
        } else {
            return "Approved";
        }
    }
};

// Global function to filter by category
VehicleRegistration* FilterByVehicleCategory(VehicleRegistration* vehicles, int n, string category) {
    int count = 0;
    // First count how many vehicles match the category
    for (int i = 0; i < n; i++) {
        if (vehicles[i].VehicleCategory() == category) {
            count++;
        }
    }

    // Allocate new array
    VehicleRegistration* filtered = new VehicleRegistration[count];
    int index = 0;

    // Fill the new array
    for (int i = 0; i < n; i++) {
        if (vehicles[i].VehicleCategory() == category) {
            filtered[index++] = vehicles[i];
        }
    }

    return filtered;
}

int main() {
    writeToFile();

    ifstream fin("text.txt");
    if (!fin) {
        cerr << "Cannot open file\n";
        return 1;
    }

    // Read data from file
    int testCase, n;
    fin >> testCase >> n;

    VehicleRegistration *records = new VehicleRegistration[n];
    for (int i = 0; i < n; i++) {
        fin >> records[i];
    }

    if (testCase == 1) {
        cout << "===== Testing Constructor, Istream Operator & Ostream Operator =====" << endl;
        for (int i = 0; i < n; i++) {
            cout << records[i];
        }
    }

    if (testCase == 2) {
        cout << "===== Testing VehicleCategory Function =====" << endl;
        for (int i = 0; i < n; i++) {
            cout << records[i].VehicleCategory() << endl;
        }
    }

    if (testCase == 3) {
        cout << "===== Testing FilterByVehicleCategory Global Function =====" << endl;
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (records[i].VehicleCategory() == "Approved") {
                count++;
            }
        }
        VehicleRegistration *filtered = FilterByVehicleCategory(records, n, "Approved");
        cout << "Approved Vehicles:" << endl;
        for (int i = 0; i < count; i++) {
            cout << filtered[i];
        }
        delete[] filtered;
    }

    if (testCase == 4) {
        cout << "===== Testing FilterByVehicleCategory Global Function =====" << endl;
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (records[i].VehicleCategory() == "Limited") {
                count++;
            }
        }
        VehicleRegistration *filtered = FilterByVehicleCategory(records, n, "Limited");
        cout << "Limited Vehicles:" << endl;
        for (int i = 0; i < count; i++) {
            cout << filtered[i];
        }
        delete[] filtered;
    }

    if (testCase == 5) {
        cout << "===== Testing FilterByVehicleCategory Global Function =====" << endl;
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (records[i].VehicleCategory() == "Restricted") {
                count++;
            }
        }
        VehicleRegistration *filtered = FilterByVehicleCategory(records, n, "Restricted");
        cout << "Restricted Vehicles:" << endl;
        for (int i = 0; i < count; i++) {
            cout << filtered[i];
        }
        delete[] filtered;
    }

    delete[] records;
    return 0;
}
Input	Result
1
4
ABC123 2020-05-15 85000 150 3 85.5
XYZ789 2015-03-22 180000 120 8 95.2
DEF456 2010-01-10 280000 90 13 130.8
GHI999 2022-11-08 25000 200 1 45.3
#
===== Testing Constructor, Istream Operator & Ostream Operator =====
Vehicle Reg: ABC123 2020-05-15 | Mileage 85000km Power 150hp Age 3y Emission 85.5g/km
Vehicle Reg: XYZ789 2015-03-22 | Mileage 180000km Power 120hp Age 8y Emission 95.2g/km
Vehicle Reg: DEF456 2010-01-10 | Mileage 280000km Power 90hp Age 13y Emission 130.8g/km
Vehicle Reg: GHI999 2022-11-08 | Mileage 25000km Power 200hp Age 1y Emission 45.3g/km
